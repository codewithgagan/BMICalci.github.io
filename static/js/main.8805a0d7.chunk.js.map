{"version":3,"sources":["logo.svg","Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","state","weight","height","valid","showBMI","BMI","changeHandler","bind","calculateBMI","okClick","this","setState","console","log","bmi","Math","pow","event","target","name","value","className","type","placeholder","onChange","onClick","style","border","width","backgroundColor","marginRight","minValue","maxValue","maxSegmentLabels","customSegmentStops","segmentColors","toFixed","labelFontSize","valueTextFontSize","startColor","endColor","paddingHorizontal","paddingVertical","needleHeightRatio","currentValueText","needleTransitionDuration","needleTransition","textColor","open","position","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8805a0d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport ReactSpeedometer from \"react-d3-speedometer\";\nimport \"./Input.css\";\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weight: 0,\n      height: 0,\n      valid: true,\n      showBMI: false,\n      BMI: 0,\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n    this.calculateBMI = this.calculateBMI.bind(this);\n    this.okClick = this.okClick.bind(this);\n  }\n\n  calculateBMI() {\n    if (this.state.weight <= 0 || this.state.height <= 0) {\n      this.setState(\n        {\n          valid: false,\n        },\n        () => {\n          console.log(this.state);\n        }\n      );\n    } else {\n      var height = this.state.height / 100;\n      console.log(height);\n      var bmi = this.state.weight / Math.pow(height, 2);\n      this.setState(\n        {\n          BMI: bmi,\n          showBMI: true,\n        },\n        () => {\n          console.log(this.state);\n        }\n      );\n    }\n  }\n  changeHandler(event) {\n    if (event.target.name == \"height\")\n      this.setState({ height: event.target.value }, () => {\n        console.log(this.state);\n      });\n    else\n      this.setState({ weight: event.target.value }, () => {\n        console.log(this.state);\n      });\n  }\n\n  okClick() {\n    this.setState({ valid: true });\n  }\n  render() {\n    if (!this.state.valid) {\n      if (this.state.height <= 0) {\n        return (\n          <Popup open={!this.state.valid} position='center center'>\n            <div className='popup'>\n              <p className='poptitle'>Height should be greater than 0.</p>\n              <button className='popbtn' onClick={this.okClick}>\n                {\" \"}\n                ok\n              </button>\n            </div>\n          </Popup>\n        );\n      } else {\n        return (\n          <Popup open={!this.state.valid} position='center center'>\n            <div className='popup'>\n              <p>Weight should be greater than 0.</p>\n              <button onClick={this.okClick}> ok</button>\n            </div>\n          </Popup>\n        );\n      }\n    }\n    return (\n      <div className='inputParent'>\n        <div>\n          <h1 className='title'>BMI CALCULATOR</h1>\n        </div>\n        <div className='card'>\n          <div className='inputContainer'>\n            <label>\n              Enter Weight in Kgs:\n              <input\n                name='weight'\n                type='number'\n                className='input'\n                placeholder='enter your weight in kgs'\n                value={this.state.weight}\n                onChange={this.changeHandler}\n              />\n            </label>\n          </div>\n          <div className='inputContainer'>\n            <label>\n              Enter Height in cm's:\n              <input\n                name='height'\n                type='number'\n                className='input'\n                placeholder='enter your height in cm'\n                value={this.state.height}\n                onChange={this.changeHandler}\n              />\n            </label>\n          </div>\n\n          <div className='submitbtn' type='submit' onClick={this.calculateBMI}>\n            Calculate\n          </div>\n          {this.state.showBMI ? (\n            <div >\n              <div className=\"result\">\n                <ul>\n                  <li>\n                    <div className='colordes'>\n                      <div\n                        className='color'\n                        style={{\n                          border: \"#efefef 1px solid;\",\n                          width: \"15px\",\n                          height: \"15px\",\n                          backgroundColor: \"#33ccff\",\n                          marginRight: \"10px\",\n                        }}></div>\n                      <label>UnderWeight</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div className='colordes'>\n                      <div\n                        className='color'\n                        style={{\n                          border: \"#efefef 1px solid;\",\n                          width: \"15px\",\n                          height: \"15px\",\n                          backgroundColor: \"#33cc33\",\n                          marginRight: \"10px\",\n                        }}></div>\n                      <label>Normal</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div className='colordes'>\n                      <div\n                        className='color'\n                        style={{\n                          border: \"#efefef 1px solid;\",\n                          width: \"15px\",\n                          height: \"15px\",\n                          backgroundColor: \"#ffcc00\",\n                          marginRight: \"10px\",\n                        }}></div>\n                      <label>OverWeight</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div className='colordes'>\n                      <div\n                        className='color'\n                        style={{\n                          border: \"#efefef 1px solid;\",\n                          width: \"15px\",\n                          height: \"15px\",\n                          backgroundColor: \"#ff9900\",\n                          marginRight: \"10px\",\n                        }}></div>\n                      <label>Obese</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div className='colordes'>\n                      <div\n                        className='color'\n                        style={{\n                          border: \"#efefef 1px solid;\",\n                          width: \"15px\",\n                          height: \"15px\",\n                          backgroundColor: \"#ff0000\",\n                          marginRight: \"10px\",\n                        }}></div>\n                      <label>Extremely Obese</label>\n                    </div>\n                  </li>\n                </ul>\n                <ReactSpeedometer\n                  minValue={0}\n                  maxValue={50}\n                  maxSegmentLabels={5}\n                  customSegmentStops={[0, 18.5, 24.9, 29.9, 34.9, 50]}\n                  segmentColors={[\n                    \"#33ccff\",\n                    \"#33cc33\",\n                    \"#ffcc00\",\n                    \"#ff9900\",\n                    \"#ff0000\",\n                  ]}\n                  value={this.state.BMI.toFixed(2)}\n                  labelFontSize={\"15px\"}\n                  valueTextFontSize={\"37px\"}\n                  startColor={\"33ccff\"}\n                  endColor={\"ff0000\"}\n                  paddingHorizontal={17}\n                  paddingVertical={17}\n                  needleHeightRatio={0.7}\n                  currentValueText={\"Value: ${value}\"}\n                  needleTransitionDuration={4000}\n                  needleTransition='easeElastic'\n                  textColor={\"#2f2f2f\"}\n                />\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Input from \"./Input/Input\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Input />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}